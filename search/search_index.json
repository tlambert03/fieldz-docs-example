{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Example of griffe-fieldz with mkdocstrings","text":"<p>Just an example repo for showing how to use griffe-fieldz with mkdocstrings.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> fieldz_docs_example<ul> <li> attrs</li> <li> dataclasses</li> <li> msgspec</li> <li> pydantic</li> </ul> </li> </ul>"},{"location":"reference/fieldz_docs_example/","title":"fieldz_docs_example","text":"<p>Example repo showing griffe-fieldz with mkdocs</p>"},{"location":"reference/fieldz_docs_example/attrs/","title":"fieldz_docs_example.attrs","text":""},{"location":"reference/fieldz_docs_example/attrs/#fieldz_docs_example.attrs.Thing","title":"<code>Thing</code>","text":"<p>Thing.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>some integer</p> <code>1</code> <code>y</code> <code>int</code> <p>Twice the value of x.</p> <code>&lt;dynamic&gt;</code> Source code in <code>src/fieldz_docs_example/attrs.py</code> <pre><code>@define\nclass Thing:\n    \"\"\"Thing.\n\n    Parameters\n    ----------\n    x : int\n        some integer\n    \"\"\"\n\n    x: int = 1\n    y: int = field()\n\n    @y.default\n    def _y_default(self) -&gt; int:\n        \"\"\"Twice the value of x.\"\"\"\n        return self.x * 2\n</code></pre>"},{"location":"reference/fieldz_docs_example/dataclasses/","title":"fieldz_docs_example.dataclasses","text":""},{"location":"reference/fieldz_docs_example/dataclasses/#fieldz_docs_example.dataclasses.Person","title":"<code>Person</code>  <code>dataclass</code>","text":"<p>Class representing a person.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the person.</p> required <code>age</code> <code>int</code> <p>Age in years (description in the field)</p> <code>0</code> Source code in <code>src/fieldz_docs_example/dataclasses.py</code> <pre><code>@dataclass\nclass Person:\n    \"\"\"Class representing a person.\n\n    Parameters\n    ----------\n    name : str\n        Name of the person.\n    \"\"\"\n\n    name: str\n    age: int = field(\n        default=0,\n        metadata={\"description\": \"Age in years (description in the field)\"},\n    )\n</code></pre>"},{"location":"reference/fieldz_docs_example/msgspec/","title":"fieldz_docs_example.msgspec","text":""},{"location":"reference/fieldz_docs_example/msgspec/#fieldz_docs_example.msgspec.Person","title":"<code>Person</code>","text":"<p>               Bases: <code>Struct</code></p> <p>Class representing a person.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the person.</p> required <code>age</code> <code>int</code> <p>Age in years (description in the field)</p> <code>0</code> Source code in <code>src/fieldz_docs_example/msgspec.py</code> <pre><code>class Person(Struct):\n    \"\"\"Class representing a person.\n\n    Parameters\n    ----------\n    name : str\n        Name of the person.\n    \"\"\"\n\n    name: str\n    age: Annotated[int, Meta(description=\"Age in years (description in the field)\")] = 0\n</code></pre>"},{"location":"reference/fieldz_docs_example/pydantic/","title":"fieldz_docs_example.pydantic","text":""},{"location":"reference/fieldz_docs_example/pydantic/#fieldz_docs_example.pydantic.MyModel","title":"<code>MyModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pydantic model with field descriptions.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Description of a in the docstring</p> required <code>b</code> <code>float</code> <p>Description of <code>b</code> in the field metadata</p> <code>42.0</code> <code>c</code> <code>str</code> <code>&lt;dynamic&gt;</code> Source code in <code>src/fieldz_docs_example/pydantic.py</code> <pre><code>class MyModel(BaseModel):\n    \"\"\"Pydantic model with field descriptions.\n\n    Parameters\n    ----------\n    a: int\n        Description of a in the docstring\n    \"\"\"\n\n    a: int\n    b: float = Field(\n        42.0,\n        json_schema_extra={\"description\": \"Description of `b` in the field metadata\"},\n    )\n    c: str = Field(default_factory=lambda data: str(data[\"a\"] + data[\"b\"]))\n</code></pre>"}]}